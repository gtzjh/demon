name: Update Search Index

on:
  schedule:
    - cron: "0 0 * * *" # 每天UTC时间0点运行
  push:
    paths:
      - '**.html'
      - '!search.json'

jobs:
  generate-index:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      # 创建 package.json
      - name: Create package.json
        run: |
          echo '{
            "name": "search-index-generator",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "cheerio": "^1.0.0-rc.12",
              "lunr": "^2.3.9"
            }
          }' > package.json
          
      - name: Install dependencies
        run: |
          npm install
          # 显示安装的依赖
          npm list --depth=0
      
      - name: Check if generate-search-index.js exists
        run: |
          ls -l scripts/
          cat scripts/generate-search-index.js
      
      - name: Generate Search Index
        run: |
          node scripts/generate-search-index.js || {
            echo "Error generating search index"
            exit 1
          }
          echo "Generated search.json:"
          ls -l search.json
          head -c 500 search.json
        
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git add .
          
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Auto-update search index [skip ci]"
            git pull origin main --rebase
            git push origin HEAD:main
          else
            # 明确清理未跟踪文件（如果有）
            git clean -fd
            # 重置可能存在的意外修改
            git reset --hard HEAD
            echo "::notice:: No changes in search.json, skipping commit"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: generate-index
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: ruby/setup-pages@v1 # 配置Ruby环境
        with:
          ruby-version: 3.1 # 与Gemfile指定版本一致

      - name: Bundle install
        run: |
          gem install bundler
          bundle install
          
      - name: Build site
        uses: actions/jekyll-build-pages@v1 # 使用官方Jekyll构建Action
        with:
          source: ./ # Jekyll项目根目录
          destination: ./_site # 默认构建目录
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site # Jekyll默认输出目录
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4